==================
DFS
==================

// RUN: bara %s -interpret | FileCheck %s

var graph = [
  [1, 2, 4], 
  [0, 2],
  [0, 1, 3],
  [2, 5],
  [0, 5],
  [3, 4]
];

var visit = [false] * 6;
var dfsOrder = [];

fn dfs(node) {
  if visit[node] {
    return;
  }

  visit[node] = true;
  push(dfsOrder, node);
  for (var idx = 0; idx < len(graph[node]); idx += 1) {
    dfs(graph[node][idx]);
  }
}

dfs(0);

print(dfsOrder);
// CHECK: [0, 1, 2, 3, 5, 4]

---

(source_file
  (comment
    (litSupport))
  (program
    (declarationStatement
      (pattern
        (identifierPattern
          (identifier)))
      (arrayExpression
        (arrayExpression
          (integerLiteral
            (integer))
          (integerLiteral
            (integer))
          (integerLiteral
            (integer)))
        (arrayExpression
          (integerLiteral
            (integer))
          (integerLiteral
            (integer)))
        (arrayExpression
          (integerLiteral
            (integer))
          (integerLiteral
            (integer))
          (integerLiteral
            (integer)))
        (arrayExpression
          (integerLiteral
            (integer))
          (integerLiteral
            (integer)))
        (arrayExpression
          (integerLiteral
            (integer))
          (integerLiteral
            (integer)))
        (arrayExpression
          (integerLiteral
            (integer))
          (integerLiteral
            (integer)))))
    (declarationStatement
      (pattern
        (identifierPattern
          (identifier)))
      (binaryExpression
        (arrayExpression
          (booleanLiteral))
        (integerLiteral
          (integer))))
    (declarationStatement
      (pattern
        (identifierPattern
          (identifier)))
      (arrayExpression))
    (functionDeclaration
      (identifier)
      (parameters
        (identifier))
      (ifStatement
        (indexExpression
          (identifierExpression
            (identifier))
          (identifierExpression
            (identifier)))
        (returnStatement))
      (assignmentStatement
        (indexExpression
          (identifierExpression
            (identifier))
          (identifierExpression
            (identifier)))
        (booleanLiteral))
      (expressionStatement
        (callExpression
          (identifierExpression
            (identifier))
          (identifierExpression
            (identifier))
          (identifierExpression
            (identifier))))
      (forStatement
        (pattern
          (identifierPattern
            (identifier)))
        (integerLiteral
          (integer))
        (binaryExpression
          (identifierExpression
            (identifier))
          (callExpression
            (identifierExpression
              (identifier))
            (indexExpression
              (identifierExpression
                (identifier))
              (identifierExpression
                (identifier)))))
        (identifierExpression
          (identifier))
        (integerLiteral
          (integer))
        (expressionStatement
          (callExpression
            (identifierExpression
              (identifier))
            (indexExpression
              (indexExpression
                (identifierExpression
                  (identifier))
                (identifierExpression
                  (identifier)))
              (identifierExpression
                (identifier)))))))
    (expressionStatement
      (callExpression
        (identifierExpression
          (identifier))
        (integerLiteral
          (integer))))
    (expressionStatement
      (callExpression
        (identifierExpression
          (identifier))
        (identifierExpression
          (identifier)))))
  (comment
    (litSupport)))

