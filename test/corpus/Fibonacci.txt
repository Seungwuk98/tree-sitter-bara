==================
Fibonacci
==================


// RUN: bara %s -interpret | FileCheck %s

fn fibo(n) {
  if n < 2 {
    return n;
  }
  return fibo(n - 1) + fibo(n - 2);
}

print(fibo(0));
// CHECK: 0

print(fibo(1));
// CHECK: 1

print(fibo(2));
// CHECK: 1

print(fibo(3));
// CHECK: 2

print(fibo(4));
// CHECK: 3

print(fibo(5));
// CHECK: 5

print(fibo(6));
// CHECK: 8

---

(source_file
  (comment
    (litSupport))
  (program
    (functionDeclaration
      (identifier)
      (parameters
        (identifier))
      (ifStatement
        (binaryExpression
          (identifierExpression
            (identifier))
          (integerLiteral
            (integer)))
        (returnStatement
          (identifierExpression
            (identifier))))
      (returnStatement
        (binaryExpression
          (callExpression
            (identifierExpression
              (identifier))
            (binaryExpression
              (identifierExpression
                (identifier))
              (integerLiteral
                (integer))))
          (callExpression
            (identifierExpression
              (identifier))
            (binaryExpression
              (identifierExpression
                (identifier))
              (integerLiteral
                (integer)))))))
    (expressionStatement
      (callExpression
        (identifierExpression
          (identifier))
        (callExpression
          (identifierExpression
            (identifier))
          (integerLiteral
            (integer)))))
    (comment
      (litSupport))
    (expressionStatement
      (callExpression
        (identifierExpression
          (identifier))
        (callExpression
          (identifierExpression
            (identifier))
          (integerLiteral
            (integer)))))
    (comment
      (litSupport))
    (expressionStatement
      (callExpression
        (identifierExpression
          (identifier))
        (callExpression
          (identifierExpression
            (identifier))
          (integerLiteral
            (integer)))))
    (comment
      (litSupport))
    (expressionStatement
      (callExpression
        (identifierExpression
          (identifier))
        (callExpression
          (identifierExpression
            (identifier))
          (integerLiteral
            (integer)))))
    (comment
      (litSupport))
    (expressionStatement
      (callExpression
        (identifierExpression
          (identifier))
        (callExpression
          (identifierExpression
            (identifier))
          (integerLiteral
            (integer)))))
    (comment
      (litSupport))
    (expressionStatement
      (callExpression
        (identifierExpression
          (identifier))
        (callExpression
          (identifierExpression
            (identifier))
          (integerLiteral
            (integer)))))
    (comment
      (litSupport))
    (expressionStatement
      (callExpression
        (identifierExpression
          (identifier))
        (callExpression
          (identifierExpression
            (identifier))
          (integerLiteral
            (integer))))))
  (comment
    (litSupport)))

